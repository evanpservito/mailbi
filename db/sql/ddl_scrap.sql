CREATE TYPE carrier_t AS ENUM('UPS', 'USPS', 'FEDEX', 'DHL', 'ONTRAC', 'GOFO', 'AMAZON', 'OTHER');
CREATE TYPE role_t AS ENUM('user', 'admin', 'superadmin');

CREATE TABLE stores (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name TEXT NOT NULL,
	address TEXT,
	phone VARCHAR(10),
	admin_id INTEGER
);

CREATE TABLE mailboxes (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	store_id INTEGER REFERENCES stores(id) ON DELETE CASCADE,
	mailbox_name VARCHAR(10) NOT NULL,
	sms_bool BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE INDEX idx_mailboxes_by_store ON mailboxes(store_id);

CREATE TABLE customers (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	store_id INTEGER NOT NULL REFERENCES stores(id) ON DELETE CASCADE,
	mailbox_id INTEGER REFERENCES mailboxes(id) ON DELETE SET NULL,
	first_name TEXT NOT NULL,
	middle_name TEXT,
	last_name TEXT,
	phone VARCHAR(10) NOT NULL,
	email TEXT
);

CREATE INDEX idx_customers_by_store ON customers(store_id);

CREATE TABLE packages (
	tracking_num TEXT PRIMARY KEY,
	store_id INTEGER NOT NULL REFERENCES stores(id) ON DELETE CASCADE,
	record_date DATE NOT NULL DEFAULT CURRENT_DATE,
	mailbox_id INTEGER REFERENCES mailboxes(id) ON DELETE SET NULL,
	customer_id INTEGER REFERENCES customers(id) ON DELETE SET NULL,
	carrier carrier_t,
	pckg_type VARCHAR(5),
	pickup_date DATE,
	sms_date DATE,
	is_collected BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE INDEX idx_packages_by_mailbox ON packages(mailbox_id);
CREATE INDEX idx_packages_by_customer ON packages(customer_id);
CREATE INDEX idx_packages_by_store ON packages(store_id);

CREATE TABLE messages (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	store_id INTEGER NOT NULL REFERENCES stores(id) ON DELETE CASCADE,
	customer_id INTEGER NOT NULL REFERENCES customers(id) ON DELETE CASCADE,
	customer_first_name TEXT NOT NULL,
	customer_middle_name TEXT,
	customer_last_name TEXT NOT NULL,
	tracking_num TEXT NOT NULL REFERENCES packages(tracking_num) ON DELETE CASCADE,
	message_text TEXT NOT NULL,
	created_at TIMESTAMP DEFAULT now()
);

CREATE INDEX idx_messages_by_customer ON messages(customer_id);
CREATE INDEX idx_messages_by_store ON messages(store_id);

CREATE TABLE accounts (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	cognito_sub TEXT UNIQUE,
	store_id INTEGER REFERENCES stores(id),
	email TEXT NOT NULL,
	role role_t NOT NULL DEFAULT 'user',
	created_at TIMESTAMP DEFAULT now()
);

ALTER TABLE stores
	ADD CONSTRAINT stores_admin_fk FOREIGN KEY (admin_id) REFERENCES accounts(id);

ALTER TABLE packages ENABLE ROW LEVEL SECURITY;
ALTER TABLE customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE mailboxes ENABLE ROW LEVEL SECURITY;

CREATE POLICY packages_select_policy ON packages
	FOR SELECT
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);

CREATE POLICY packages_insert_policy ON packages
	FOR INSERT
	WITH CHECK (
		store_id = current_setting('app.current_store_id', true)::INT
		OR current_setting('app.current_role', true) = 'superadmin'
	);
	
CREATE POLICY packages_update_policy ON packages
	FOR UPDATE
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	)
	WITH CHECK (
		store_id = current_setting('app.current_store_id', true)::INT
		OR current_setting('app.current_role', true) = 'superadmin'
	);
	
CREATE POLICY packages_delete_policy ON packages
	FOR DELETE
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);
	
CREATE POLICY mailboxes_select_policy ON mailboxes
	FOR SELECT
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);

CREATE POLICY mailboxes_insert_policy ON mailboxes
	FOR INSERT
	WITH CHECK (
		store_id = current_setting('app.current_store_id', true)::INT
		OR current_setting('app.current_role', true) = 'superadmin'
	);
	
CREATE POLICY mailboxes_update_policy ON mailboxes
	FOR UPDATE
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	)
	WITH CHECK (
		store_id = current_setting('app.current_store_id', true)::INT
		OR current_setting('app.current_role', true) = 'superadmin'
	);
	
CREATE POLICY mailboxes_delete_policy ON mailboxes
	FOR DELETE
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);

CREATE POLICY customers_select_policy ON customers
	FOR SELECT
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);

CREATE POLICY customers_insert_policy ON customers
	FOR INSERT
	WITH CHECK (
		store_id = current_setting('app.current_store_id', true)::INT
		OR current_setting('app.current_role', true) = 'superadmin'
	);
	
CREATE POLICY customers_update_policy ON customers
	FOR UPDATE
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	)
	WITH CHECK (
		store_id = current_setting('app.current_store_id', true)::INT
		OR current_setting('app.current_role', true) = 'superadmin'
	);
	
CREATE POLICY customers_delete_policy ON customers
	FOR DELETE
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);

ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

CREATE POLICY messages_select_policy ON messages
	FOR SELECT
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);

CREATE POLICY messages_insert_policy ON messages
	FOR INSERT
	WITH CHECK (
		store_id = current_setting('app.current_store_id', true)::INT
		OR current_setting('app.current_role', true) = 'superadmin'
	);
	
CREATE POLICY messages_delete_policy ON messages
	FOR DELETE
	USING (
		store_id = current_setting('app.current_store_id', true)::INT
		OR (
			current_setting('app.current_account_id', true) IS NOT NULL
			AND (SELECT role FROM accounts WHERE id = current_setting('app.current_account_id', true)::INT) = 'superadmin'
		)
	);
	
CREATE ROLE mailbi_service LOGIN PASSWORD 'root';
GRANT CONNECT ON DATABASE mailbidev TO mailbi_service;
GRANT USAGE ON SCHEMA public TO mailbi_service;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO mailbi_service;
ALTER DEFAULT PRIVILEGES IN SCHEMA public
	GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mailbi_service;
